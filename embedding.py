import argparse

from gensim.models import Word2Vec


def generate_embeddings(context_file, sg, dimension, window, threads):
	contexts = []
	try:
		context_file_ = open(context_file)
		print('Reading contexts from', context_file)
		for line in context_file_:
			contexts.append(line.strip().split())
	except IOError:
		print('Could not read file: ', context_file)
		return

	print('Generating word vectors...')
	model = Word2Vec(contexts, sg=sg, size=dimension, window=window, workers=threads)
	model_fname = 'embeddings/model_' + str(sg) + '_' + str(dimension) + '_' + str(window) + '.bin' 
	model.save(model_fname)


if __name__ == '__main__':
	parser = argparse.ArgumentParser(description='Generate author embeddings.')
	parser.add_argument('-c','--context', dest='context', required=True,
			    help='Context file(default: None)')
	parser.add_argument('-m','--model', dest='model', default=0,
			    help='Model used for generating vectors. 0 - CBOW, 1 - skip-gram (default: 0)')
	parser.add_argument('-d','--dimension', dest='dimension', default=100,
			    help='Dimension of vectors generated by Word2Vec(default: 100)')
	parser.add_argument('-w','--window', dest='window_size', default=5,
			    help='Window size used for generating contexts(default: 5)')
	parser.add_argument('-t','--threads', dest='num_threads', default=42,
			    help='Number of threads used for generating contexts(default: 42)')
	args = parser.parse_args()

	generate_embeddings(context_file=args.context, sg=args.model, dimension=args.dimension, window=args.window_size,
			    threads=args.num_threads)